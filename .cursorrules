# .cursorrules

## 使命（Purpose）
確保在 Cursor 專案中，所有 AI／人類協作都能：
1. **持續學習**：即時記錄錯誤與修正，避免重蹈覆轍  
2. **系統化思考**：在 Scratchpad 中拆解、追蹤、反思每項任務  
3. **自我進化**：隨著專案進展，自動汰換過時資訊、擴充新經驗  

---

## 區塊結構（File Sections）

### 1. Lessons  
- **User-Specified Lessons**：使用者明確指出的注意事項或偏好  
- **Cursor-Learned**：AI 在對話中獲得的修正、最佳解法或踩坑經驗  
- **更新規則**  
  1. 一旦遇到可重複利用的經驗，立即寫入此區塊  
  2. 以條列簡短描述「錯誤 → 修正 → 結論」  

### 2. Scratchpad  
為「進行中任務」的暫存區，協助**思考、拆解、追蹤**。  
建議結構：  

```md
## Plan
- [ ] 步驟 1  
- [ ] 步驟 2  
  - 子步驟  
- [ ] 步驟 3  

## Progress
- 2025-05-20 02:15  ✅ 完成步驟 1，意外發現 X 問題  
- 2025-05-20 03:10  ➡️ 修正並更新 Lessons  
````

> **規範**
>
> * 僅放「尚未完成」或「需要回顧」的事項
> * 任務完成後，將相關筆記移至 Lessons 或刪除
> * 定期（建議每日／每次任務結束）清理過期內容，保持精簡

---

## 自我進化機制（Self-Evolution）

1. **事件驅動更新**

   * 當發生「錯誤被糾正」「新工具版本」「重構大改」等事件，立即寫入 *Lessons*
2. **週期性回顧**

   * 於每週或里程碑結束時，檢查 Scratchpad 與 Lessons：

     * 刪除無用資訊
     * 合併重複經驗
     * 標註已過時的做法
3. **版本註記**

   * 重要調整可附上日期與簡短說明，方便追溯
4. **遷移策略**

   * 若經驗屬於跨專案共通知識，考慮抽離到中央知識庫或維基

---

## 使用守則（Best Practices）

1. **先讀後寫**：接到新任務→先掃過 Scratchpad，確保不重複、方向正確
2. **小步快寫**：任何靈感、疑問、暫時結論都先丟進 Scratchpad，再逐步整理
3. **完成即歸檔**：任務結束立即把重點學習寫到 Lessons，並刪除或精簡 Scratchpad
4. **保持原子性**：每條 Lesson 僅描述一個教訓，方便搜尋與重用
5. **用日期戳記**：Progress 與 Lessons 建議加時間，提升可追溯性
6. **避免冗長**：Scratchpad ≠ 最終文件；寫足夠讓自己回想即可

---

# Lessons

## User-Specified Lessons
- 用繁體中文回話，但 code 內的註釋請全使用英文
- Git commit 請以英文生成，並盡可能的簡短、簡約描述，請以不超過 70 個字元為標準

## Cursor-Learned
- **2025-01-12**  
  - *實作*：完成 Magic Link 認證系統的完整後端實作  
  - *架構*：使用 Redis 儲存短期驗證 token（15分鐘 TTL），JWT 用於長期 access token  
  - *結論*：短期驗證 token 應使用 Redis 而非 MongoDB，利用自動過期和高速查詢特性

- **2025-01-12**  
  - *前端*：實作響應式設計時遇到通知溢出問題  
  - *修正*：移除 `white-space: nowrap` 衝突，改用 `word-wrap: break-word` 處理長文字  
  - *結論*：通知系統需要在美觀和功能性間平衡，允許適當換行比強制單行更實用

- **2025-01-12**  
  - *安全*：整合 Cloudflare Turnstile 隱形驗證防止濫用  
  - *實作*：Magic Link 先檢查用戶存在性，避免向不存在用戶發送郵件  
  - *架構*：Turnstile 驗證完成後才送出請求，每次送出後自動重新刷新 widget  
  - *結論*：隱形驗證提供良好用戶體驗，同時有效防止機器人攻擊和流量濫用

- **2025-01-12**  
  - *錯誤*：MongoDB 連接字符串密碼包含特殊字符導致認證失敗  
  - *修正*：將密碼中的 `*` 編碼為 `%2A`，`!` 編碼為 `%21`  
  - *結論*：MongoDB URI 中的密碼必須進行完整的 URL 編碼，特別是特殊字符

- **2025-06-12**  
  - *錯誤*：MongoDB 連線方式錯誤導致認證失敗，URI 格式不正確  
  - *修正*：改用 `connect(db=settings.MONGODB_DATABASE, host=settings.MONGODB_URI)` 避免字串串接錯誤  
  - *結論*：MongoDB 連線應使用 mongoengine 標準參數而非字串串接

- **2025-06-12**  
  - *錯誤*：Gmail SMTP 設定衝突，465 連接埠 + STARTTLS 導致連線失敗  
  - *修正*：465 連接埠應使用 `MAIL_SSL_TLS=True` 和 `MAIL_STARTTLS=False`  
  - *結論*：SMTPS (465) 需要直接 SSL/TLS，STARTTLS 用於明文升級加密 (587)

- **2025-06-12**  
  - *功能*：實作 Magic Link 防濫用機制  
  - *邏輯*：15分鐘內重複請求重發相同 token，超過3次拒絕服務  
  - *架構*：使用 Redis 存儲 email-token 映射和發送次數，兩者都有15分鐘TTL  
  - *結論*：防濫用需要平衡用戶體驗和系統安全，重用token比拒絕服務更友善

- **2025-06-12**  
  - *功能*：允許 Magic Link 在15分鐘內重複使用，改善用戶體驗  
  - *修正*：移除 token 驗證後自動刪除的邏輯，允許多次點擊同一連結  
  - *安全*：整合真實IP顯示功能，支援 Cloudflare 代理環境  
  - *UX*：將郵件語調改為親切非正式風格，移除過度正式的用詞

- **2025-06-12**  
  - *UI/UX*：實作完整的已登入狀態介面  
  - *功能*：SSO頁面檢測登入狀態，顯示用戶頭像、姓名和登出按鈕  
  - *架構*：新增 `/auth/status` 和 `/auth/logout` API，JWT包含完整用戶資訊  
  - *前端*：localStorage 管理 token，支援 Base64 頭像顯示和響應式設計

- **2025-06-12**  
  - *架構*：實作軍用級別SSO跨域認證系統  
  - *安全*：HMAC-SHA256簽名驗證、域名白名單、防重放攻擊機制  
  - *API*：提供 `/auth/sso/verify`、`/auth/sso/config`、`/auth/sso/refresh` 端點  
  - *SDK*：完整JavaScript SDK支援React、Vue.js框架，自動token刷新

- **2025-01-12**  
  - *修正*：移除Magic Link自動創建帳號功能，恢復只允許現有用戶登入的邏輯  
  - *安全*：用戶不存在時顯示「查無此帳號，請確認您的電子郵件地址是否正確。」  
  - *架構*：create_user_session改用get_user_by_email，完全禁止自動創建用戶  
  - *結論*：系統安全性優於便利性，新用戶需要透過其他管道註冊

- **2025-06-24**  
  - *重構*：完全移除 MongoDB 直接連接，改用中央化 Database Service API  
  - *配置*：移除 MONGODB_URI、MONGODB_DATABASE 等舊設定，所有配置提供預設值避免啟動錯誤  
  - *架構*：所有資料庫操作透過 HTTP API 呼叫，使用 HMAC-SHA256 簽名認證  
  - *結論*：微服務架構提供更好的擴展性和維護性，避免資料庫直接耦合

- **2025-01-12**  
  - *安全*：實作 OIDC 客戶端註冊管理員金鑰認證機制  
  - *問題*：原本 `/oidc/register` 端點完全無保護，任何人都能註冊 OIDC 客戶端  
  - *解決*：新增 `OIDC_ADMIN_KEY` 環境變數和 Bearer Token 認證  
  - *實作*：支援 Authorization header 和 form data 兩種認證方式，含詳細錯誤日誌  
  - *結論*：OIDC 註冊必須有適當的存取控制，避免未授權的客戶端註冊

- **2025-01-12**  
  - *錯誤*：Magic Link 郵件函數參數不匹配導致 422 錯誤  
  - *問題*：`send_magic_link_email()` 定義為3個參數但調用時傳了4個參數  
  - *修正*：在 `send_magic_link_email()` 中新增 `real_name` 參數支援  
  - *改進*：郵件內容現在顯示用戶真實姓名，提供更個人化的體驗  
  - *結論*：函數簽名與調用必須一致，參數變更需要同步更新定義和調用

- **2025-06-24**  
  - *錯誤*：Gmail SMTP 連接超時，port 465 配置問題  
  - *診斷*：環境變數 MAIL_PORT=465 需要 MAIL_SSL_TLS=true 和 MAIL_STARTTLS=false  
  - *修正*：改用動態 `get_mail_config()` 確保環境變數正確載入 fastapi-mail  
  - *工具*：創建 SMTP 診斷工具驗證不同 port 配置 (465/587)  
  - *結論*：port 465 使用直接 SSL/TLS，port 587 使用 STARTTLS，fastapi-mail 需動態配置

- **2025-06-24**  
  - *問題*：OIDC 客戶端資訊存儲在 Redis，重啟後資料丟失  
  - *原因*：Redis 是內存儲存，不適合存放永久配置資料  
  - *改進*：改用 `OIDC_CLIENTS` 環境變數存儲 JSON 格式的客戶端清單  
  - *工具*：註冊工具現在生成環境變數，管理員手動添加到 .env 後重啟生效  
  - *架構*：客戶端註冊從自動寫入改為生成配置，提高安全性和可控性

- **2025-06-24**  
  - *問題*：Coolify 自動轉換環境變數格式，將 JSON 變成 `'${OIDC_CLIENTS}'` 導致解析失敗  
  - *原因*：JSON 格式包含特殊字符，Coolify 無法正確處理  
  - *解決*：改用 Base64 編碼存儲 OIDC 客戶端配置  
  - *優勢*：避免特殊字符問題、更安全、Coolify 相容性佳  
  - *結論*：Base64 編碼是處理複雜環境變數的最佳實踐

- **2025-01-12**  
  - *功能*：實作無縫 OIDC 跳轉機制，透過 Redis 狀態管理避免用戶回到 SSO 頁面  
  - *架構*：OIDC 授權端點將狀態存儲到 Redis (15分鐘TTL)，Magic Link 驗證後直接跳轉到原始應用  
  - *UX*：登入頁面顯示來源應用名稱，登出後顯示成功訊息並跳轉回 SSO 首頁  
  - *實作*：修改 auth 和 oidc 路由、更新前端 JavaScript 和模板、新增 CSS 樣式  
  - *結論*：OIDC 狀態管理應使用 Redis 而非 URL 參數，提供更好的安全性和用戶體驗

- **2025-01-12**  
  - *問題*：OIDC 跳轉過程中客戶端無法正確獲取資料，需要手動再次登入  
  - *原因*：Magic Link 驗證後直接跳轉到 OIDC 客戶端，缺少在 SSO 系統建立完整登入狀態的步驟  
  - *修正*：改為顯示成功頁面 3 秒後自動跳轉，確保 SSO session cookie 正確設置  
  - *改進*：加強 OIDC 流程的錯誤處理、日誌記錄和調試信息  
  - *UX*：支援可配置的自動跳轉延遲時間和手動跳轉連結  
  - *結論*：OIDC 跳轉前需要先在 SSO 系統建立完整的用戶會話狀態

- **2025-01-12**  
  - *錯誤*：OIDC state 參數不匹配導致 Outline 認證失敗  
  - *原因*：Magic Link 驗證後過早刪除 Redis 中的 OIDC 狀態，導致 Outline 無法驗證 state 參數  
  - *修正*：不在 Magic Link 驗證時刪除 OIDC 狀態，改為在 token exchange 完成後清理  
  - *實作*：將 oidc_state_id 存儲到授權碼中，token exchange 成功後自動清理相關狀態  
  - *UX*：改為直接跳轉，完全移除過渡頁面，實現極速無縫登入體驗  
  - *簡化*：刪除 auth_result.html 模板，錯誤處理改為 URL 參數 + 登入頁面訊息顯示  
  - *結論*：OIDC 狀態管理需要在完整流程結束後才能清理，確保客戶端能正確驗證

- **2025-06-25**  
  - *問題*：Outline 重複發送 token exchange 請求導致第二次失敗（Authorization code not found）  
  - *原因*：第一次成功後立即刪除授權碼，重複請求無法處理  
  - *修正*：實作授權碼冪等性機制 - 標記為已使用而非刪除，緩存 tokens 回傳相同結果  
  - *安全*：已使用的授權碼只保留5分鐘，防止濫用但允許合理的重複請求  
  - *架構*：授權碼包含 used 標記、使用時間和緩存的 tokens，確保冪等性  
  - *結論*：OIDC 實作必須考慮客戶端重試機制，授權碼應該支援冪等性而非單次使用

- **2025-06-25**  
  - *問題*：透過 OIDC 流程登入後，回到 SSO 官網仍要求重新登入，缺乏全域登入狀態管理  
  - *分析*：Magic Link 驗證已正確設置 SSO session cookie，但登入頁面未檢查現有 session  
  - *修正*：在登入頁面添加 session 檢查邏輯，已登入用戶顯示個人資訊和登出按鈕  
  - *實作*：從 OIDC 模組移植 check_user_session 函數到 auth.py，支援已登入狀態模板渲染  
  - *架構*：登入頁面支援雙狀態 - 未登入顯示登入表單，已登入顯示用戶資訊  
  - *結論*：SSO 系統應提供一致的全域登入體驗，避免用戶重複驗證

- **2025-01-12**  
  - *重構*：全面實作 Database API 頭像 URL 系統，完全取代 Base64 傳輸  
  - *架構*：所有頭像輸出統一使用 `/users/{user_id}/avatar` API 端點  
  - *OIDC*：ID Token 和 UserInfo 端點現在提供頭像 URL 而非 Base64 數據  
  - *前端*：JavaScript 和模板更新為處理 avatar_url 而非 avatar_base64  
  - *優化*：利用 Database API 的 HTTP 緩存、ETag 和 CDN 優化提升性能  
  - *SDK*：HackIt SSO SDK 新增 getUserAvatarUrl() 方法支援頭像 URL  
  - *結論*：統一頭像 URL 系統提供更好的性能、緩存和 CDN 支援，符合現代 Web 標準

- **2025-01-12**  
  - *問題*：SSO/OIDC 系統 session 管理不一致，已登入用戶仍需重新登入  
  - *原因*：重複的 check_user_session 函數、cookie 域名設定不一致、缺乏統一的 session 檢查  
  - *修正*：統一 session 管理到 config.py，所有路由使用相同的 check_user_session 函數  
  - *架構*：所有 cookie 域名設定統一使用 get_cookie_domain() 函數，確保跨子域名一致性  
  - *改進*：增強 OIDC 授權端點的 session 檢查和日誌記錄，提供更好的調試信息  
  - *結論*：SSO 系統的 session 管理必須完全統一，避免不同模組間的不一致行為

# Scratchpad

## Plan
- [x] 建立專案基礎架構（FastAPI + Redis + Database Service API）
- [x] 設計前端登入介面（Apple 風格 + 毛玻璃效果）
- [x] 實作 Magic Link 完整流程
- [x] 整合安全防護機制
- [x] 實作 Magic Link 防濫用機制
- [x] 實作已登入狀態UI與登出功能
- [x] 實作企業級SSO跨域認證系統
- [x] 完全移除 MongoDB 直接連接，改用 Database Service API
- [x] 修復 SSO session 一致性問題
  - [x] 統一 session 檢查函數到 config.py
  - [x] 修正所有 cookie 域名設定
  - [x] 增強 OIDC 授權端點的 session 檢查
  - [x] 加強日誌記錄和調試信息
- [ ] 測試完整流程
- [ ] 部署準備

## Progress
- 2025-06-25 修復 SSO session 一致性問題：
  - 發現問題：重複的 check_user_session 函數、cookie 域名設定不一致
  - 解決方案：統一 session 管理到 config.py，所有 cookie 使用 get_cookie_domain()
  - 改進：增強 OIDC 授權端點檢查邏輯，提供更詳細的調試日誌
  - 結果：已登入用戶現在應該能在所有 OIDC 流程中獲得無縫體驗

---

## 範例（Example）

```md
# Lessons

## Cursor-Learned
- **2025-05-20**  
  - *錯誤*：未遵守 matplotlib 只能單圖、不指定顏色的規定  
  - *修正*：改為分次繪圖並移除 color 參數  
  - *結論*：未來繪圖須檢查三條規則（不使用 seaborn、單張圖、不指定顏色）

# Scratchpad

## Plan
- [ ] 搜集使用者需求
- [ ] 設計資料流程
- [ ] 撰寫 API 介面

## Progress
- 05-20 02:20  完成需求訪談摘要
```

---

> ***保持簡潔、即時更新，讓 .cursorrules 成為專案的「作業系統」。***